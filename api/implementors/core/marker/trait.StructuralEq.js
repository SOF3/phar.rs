(function() {var implementors = {};
implementors["byteorder"] = [{"text":"impl StructuralEq for BigEndian","synthetic":false,"types":[]},{"text":"impl StructuralEq for LittleEndian","synthetic":false,"types":[]}];
implementors["bzip2"] = [{"text":"impl StructuralEq for Action","synthetic":false,"types":[]},{"text":"impl StructuralEq for Status","synthetic":false,"types":[]},{"text":"impl StructuralEq for Error","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; StructuralEq for Either&lt;L, R&gt;","synthetic":false,"types":[]}];
implementors["flate2"] = [{"text":"impl StructuralEq for FlushCompress","synthetic":false,"types":[]},{"text":"impl StructuralEq for FlushDecompress","synthetic":false,"types":[]},{"text":"impl StructuralEq for Status","synthetic":false,"types":[]},{"text":"impl StructuralEq for Compression","synthetic":false,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;A, B&gt; StructuralEq for EitherOrBoth&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; StructuralEq for FoldWhile&lt;T&gt;","synthetic":false,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl StructuralEq for CompressionStrategy","synthetic":false,"types":[]},{"text":"impl StructuralEq for TDEFLFlush","synthetic":false,"types":[]},{"text":"impl StructuralEq for TDEFLStatus","synthetic":false,"types":[]},{"text":"impl StructuralEq for CompressionLevel","synthetic":false,"types":[]},{"text":"impl StructuralEq for TINFLStatus","synthetic":false,"types":[]},{"text":"impl StructuralEq for MZFlush","synthetic":false,"types":[]},{"text":"impl StructuralEq for MZStatus","synthetic":false,"types":[]},{"text":"impl StructuralEq for MZError","synthetic":false,"types":[]},{"text":"impl StructuralEq for DataFormat","synthetic":false,"types":[]},{"text":"impl StructuralEq for StreamResult","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl StructuralEq for Delimiter","synthetic":false,"types":[]},{"text":"impl StructuralEq for Spacing","synthetic":false,"types":[]}];
implementors["same_file"] = [{"text":"impl StructuralEq for Handle","synthetic":false,"types":[]}];
implementors["typenum"] = [{"text":"impl StructuralEq for B0","synthetic":false,"types":[]},{"text":"impl StructuralEq for B1","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Unsigned + NonZero&gt; StructuralEq for PInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Unsigned + NonZero&gt; StructuralEq for NInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl StructuralEq for Z0","synthetic":false,"types":[]},{"text":"impl StructuralEq for UTerm","synthetic":false,"types":[]},{"text":"impl&lt;U, B&gt; StructuralEq for UInt&lt;U, B&gt;","synthetic":false,"types":[]},{"text":"impl StructuralEq for ATerm","synthetic":false,"types":[]},{"text":"impl&lt;V, A&gt; StructuralEq for TArr&lt;V, A&gt;","synthetic":false,"types":[]},{"text":"impl StructuralEq for Greater","synthetic":false,"types":[]},{"text":"impl StructuralEq for Less","synthetic":false,"types":[]},{"text":"impl StructuralEq for Equal","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()